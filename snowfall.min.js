window.snowfall = (function(t) {
  var e = {}
  function n(i) {
    if (e[i]) return e[i].exports
    var r = (e[i] = { i: i, l: !1, exports: {} })
    return t[i].call(r.exports, r, r.exports, n), (r.l = !0), r.exports
  }
  return (
    (n.m = t),
    (n.c = e),
    (n.d = function(t, e, i) {
      n.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: i })
    }),
    (n.r = function(t) {
      'undefined' != typeof Symbol &&
        Symbol.toStringTag &&
        Object.defineProperty(t, Symbol.toStringTag, { value: 'Module' }),
        Object.defineProperty(t, '__esModule', { value: !0 })
    }),
    (n.t = function(t, e) {
      if ((1 & e && (t = n(t)), 8 & e)) return t
      if (4 & e && 'object' == typeof t && t && t.__esModule) return t
      var i = Object.create(null)
      if (
        (n.r(i),
        Object.defineProperty(i, 'default', { enumerable: !0, value: t }),
        2 & e && 'string' != typeof t)
      )
        for (var r in t)
          n.d(
            i,
            r,
            function(e) {
              return t[e]
            }.bind(null, r)
          )
      return i
    }),
    (n.n = function(t) {
      var e =
        t && t.__esModule
          ? function() {
              return t.default
            }
          : function() {
              return t
            }
      return n.d(e, 'a', e), e
    }),
    (n.o = function(t, e) {
      return Object.prototype.hasOwnProperty.call(t, e)
    }),
    (n.p = ''),
    n((n.s = 0))
  )
})([
  function(t, e, n) {
    const i = n(1),
      r = document.querySelector('#snow-container'),
      o = document.createElement('canvas'),
      a = o.getContext('2d')
    let d = i.create(0, 0),
      s = i.create(0, 0),
      l = 250,
      c = [],
      u = '#000000',
      f = '#8d90b7',
      h = '#ffffff',
      g = 0,
      y = 0
    function p() {
      ;(o.width = r.offsetWidth), (o.height = r.offsetHeight), (c = M(S()))
    }
    function v() {
      c.forEach(t => {
        ;(w.x = s.x),
          (w.y = s.y),
          w.multiplyScalar(t.size + t.random),
          t.pos.add(w),
          (x.x = d.x),
          (x.y = d.y),
          x.multiplyScalar(t.size + t.random),
          t.pos.add(x)
        const e = t.noise
        ;(b = i.create(g * Math.sin(y * m + e), 0)),
          t.pos.add(b),
          t.pos.x > o.width && (t.pos.x = 0),
          t.pos.x < 0 && (t.pos.x = o.width),
          t.pos.y > o.height &&
            ((t.pos.y = 0), (t.pos.x = Math.random() * o.width)),
          t.pos.y < 0 &&
            ((t.pos.y = o.height), (t.pos.x = Math.random() * o.width))
      }),
        (m += 1),
        (function() {
          a.clearRect(0, 0, o.width, o.height),
            u && ((a.fillStyle = u), a.fillRect(0, 0, o.width, o.height))
          const t = c.filter(t => t.size >= 7),
            e = c.filter(t => t.size < 7)
          ;(a.fillStyle = f),
            e.forEach(t => {
              a.beginPath(), P(t.pos, t.size), a.fill()
            }),
            (a.fillStyle = h),
            t.forEach(t => {
              a.beginPath(), P(t.pos, t.size), a.fill()
            })
        })(),
        window.requestAnimationFrame(v)
    }
    let m = 0
    const w = i.create(0, 0),
      x = i.create(0, 0)
    let b = null
    function M(t) {
      let e = []
      for (; t--; )
        e.push({
          pos: i.create(Math.random() * o.width, Math.random() * o.height),
          size: 3 + 5 * Math.random(),
          noise: 10 * Math.random(),
          amplitude: 2 * Math.random(),
          frequency: 0.01 * Math.random(),
          random: Math.random()
        })
      return e
    }
    function S() {
      const t = o.width * o.height
      return Math.round(l * (t / 2073600))
    }
    function P(t, e) {
      a.arc(t.x, t.y, e, 0, 2 * Math.PI, !1)
    }
    function q(t, e) {
      ;(d = i.fromDegrees(t)).multiplyScalar(e)
    }
    function z(t, e) {
      ;(s = i.fromDegrees(t)).multiplyScalar(e)
    }
    t.exports = {
      setAmplitude: function(t) {
        g = t
      },
      setAngle: function(t) {
        degrees = t
      },
      setBackground: function(t) {
        u = t
      },
      setDensity: function(t) {
        ;(l = t), (c = M(S()))
      },
      setFrequency: function(t) {
        y = t
      },
      setGravity: q,
      setPrimary: function(t) {
        f = t
      },
      setSecondary: function(t) {
        h = t
      },
      setStrength: function(t) {
        strength = t
      },
      setWind: z,
      start: function(t = {}) {
        void 0 !== t.bg && (u = t.bg),
          void 0 !== t.primary && (f = t.primary),
          void 0 !== t.secondary && (h = t.secondary),
          void 0 !== t.density && (l = t.density),
          void 0 !== t.wave &&
            (void 0 !== t.wave.amplitude && (g = t.wave.amplitude),
            void 0 !== t.wave.frequency && (y = t.wave.frequency)),
          void 0 !== t.gravity &&
            (void 0 !== t.gravity.angle &&
              void 0 !== t.gravity.strength &&
              q(t.gravity.angle, t.gravity.strength),
            void 0 !== t.gravity.angle &&
              void 0 === t.gravity.strength &&
              q(t.gravity.angle, 0.6),
            void 0 === t.gravity.angle &&
              void 0 !== t.gravity.strength &&
              q(90, t.gravity.strength)),
          void 0 !== t.wind &&
            (void 0 !== t.wind.angle &&
              void 0 !== t.wind.strength &&
              z(t.wind.angle, t.wind.strength),
            void 0 !== t.wind.angle &&
              void 0 === t.wind.strength &&
              z(t.wind.angle, 0),
            void 0 === t.wind.angle &&
              void 0 !== t.wind.strength &&
              z(0, t.wind.strength)),
          (o.width = r.offsetWidth),
          (o.height = r.offsetHeight),
          r.appendChild(o),
          (c = M(S())),
          (window.onresize = p),
          window.requestAnimationFrame(v)
      }
    }
  },
  function(t, e) {
    function n(t, e) {
      let r = t,
        o = e
      const a = () => Math.sqrt(r * r + o * o),
        d = t => {
          ;(r *= t), (o *= t)
        },
        s = () => {
          let t = a()
          ;(r /= t), (o /= t)
        }
      return {
        add: t => {
          ;(r += t.x), (o += t.y)
        },
        addScalar: t => {
          ;(r += t), (o += t)
        },
        clone: i,
        divide: t => {
          ;(r /= t.x), (o /= t.y)
        },
        divideScalar: t => {
          ;(r /= t), (o /= t)
        },
        dot: t => r * t.x + o * t.y,
        getLength: a,
        getOpposite: t => n(-t.x, -t.y),
        getPerp: () => n(-o, r),
        isEqualTo: t => r == t.x && o == t.y,
        multiply: t => {
          ;(r *= t.x), (o *= t.y)
        },
        multiplyScalar: d,
        normalise: s,
        setLength: t => {
          s(), d(t)
        },
        subtract: t => {
          ;(r -= t.x), (o -= t.y)
        },
        subtractScalar: t => {
          ;(r -= t), (o -= t)
        },
        set x(t) {
          r = t
        },
        get x() {
          return r
        },
        set y(t) {
          o = t
        },
        get y() {
          return o
        }
      }
    }
    const i = t => n(t.x, t.y)
    t.exports = {
      clone: i,
      create: n,
      fromDegrees: t => {
        const e = t * (Math.PI / 180)
        return n(Math.cos(e), Math.sin(e))
      }
    }
  }
])
